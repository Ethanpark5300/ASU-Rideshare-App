{"ast":null,"code":"var _class;\nimport { Account } from \"../account/Account\";\nimport { setAccountStore } from \"../store/features/accountSlice\";\nimport { useAppDispatch } from \"../store/hooks\";\nexport class DatabaseAccessor {\n  constructor() {}\n  static getInstance() {\n    if (!DatabaseAccessor.instance) DatabaseAccessor.instance = new DatabaseAccessor();\n    return DatabaseAccessor.instance;\n  }\n\n  /**\r\n   * updates the account store with a new account if login is successful\r\n   * @param email username\r\n   * @param password password\r\n   * @returns true if successful, false otherwise\r\n   */\n  login(email, password) {\n    var _account;\n    let hashedPassword = this.encrypt(password);\n    let account = undefined;\n    //make sure legal login\n    //TODO actually put in legit tests\n    if (email.endsWith(\"@asu.edu\")) {\n      account = new Account(email);\n    }\n    useAppDispatch()(setAccountStore(account));\n    console.log((_account = account) === null || _account === void 0 ? void 0 : _account.email);\n    return true;\n  }\n\n  /**\r\n   * \r\n   * @param password string to be encrypted\r\n   * @returns encrypted password\r\n   */\n  encrypt(password) {\n    //TODO implement hashing\n    return password;\n  }\n}\n_class = DatabaseAccessor;\nDatabaseAccessor.instance = void 0;","map":{"version":3,"names":["Account","setAccountStore","useAppDispatch","DatabaseAccessor","constructor","getInstance","instance","login","email","password","_account","hashedPassword","encrypt","account","undefined","endsWith","console","log","_class"],"sources":["C:/Users/aeric/Documents/School/Capstone/ASU-Rideshare-App/src/databases/DatabaseAccessor.ts"],"sourcesContent":["import { Account } from \"../account/Account\";\r\nimport { setAccountStore } from \"../store/features/accountSlice\";\r\nimport { useAppDispatch } from \"../store/hooks\";\r\n\r\n\r\nexport class DatabaseAccessor {\r\n\tprivate static instance: DatabaseAccessor;\r\n\r\n\tprivate constructor() { }\r\n\r\n\tpublic static getInstance(): DatabaseAccessor {\r\n\t\tif (!DatabaseAccessor.instance)\r\n\t\t\tDatabaseAccessor.instance = new DatabaseAccessor();\r\n\t\treturn DatabaseAccessor.instance;\r\n\t}\r\n\r\n\t/**\r\n\t * updates the account store with a new account if login is successful\r\n\t * @param email username\r\n\t * @param password password\r\n\t * @returns true if successful, false otherwise\r\n\t */\r\n\tpublic login(email: string, password: string):Account | undefined {\r\n\t\tlet hashedPassword: string = this.encrypt(password);\r\n\t\tlet account: Account | undefined = undefined;\r\n\t\t//make sure legal login\r\n\t\t//TODO actually put in legit tests\r\n\t\tif (email.endsWith(\"@asu.edu\")) {\r\n\t\t\taccount = new Account(email);\r\n\t\t}\r\n\r\n\t\tuseAppDispatch()(setAccountStore(account));\r\n\t\tconsole.log(account?.email);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t * @param password string to be encrypted\r\n\t * @returns encrypted password\r\n\t */\r\n\tprivate encrypt(password: string): string {\r\n\t\t//TODO implement hashing\r\n\t\treturn password;\r\n\t}\r\n}"],"mappings":";AAAA,SAASA,OAAO,QAAQ,oBAAoB;AAC5C,SAASC,eAAe,QAAQ,gCAAgC;AAChE,SAASC,cAAc,QAAQ,gBAAgB;AAG/C,OAAO,MAAMC,gBAAgB,CAAC;EAGrBC,WAAWA,CAAA,EAAG,CAAE;EAExB,OAAcC,WAAWA,CAAA,EAAqB;IAC7C,IAAI,CAACF,gBAAgB,CAACG,QAAQ,EAC7BH,gBAAgB,CAACG,QAAQ,GAAG,IAAIH,gBAAgB,CAAC,CAAC;IACnD,OAAOA,gBAAgB,CAACG,QAAQ;EACjC;;EAEA;AACD;AACA;AACA;AACA;AACA;EACQC,KAAKA,CAACC,KAAa,EAAEC,QAAgB,EAAsB;IAAA,IAAAC,QAAA;IACjE,IAAIC,cAAsB,GAAG,IAAI,CAACC,OAAO,CAACH,QAAQ,CAAC;IACnD,IAAII,OAA4B,GAAGC,SAAS;IAC5C;IACA;IACA,IAAIN,KAAK,CAACO,QAAQ,CAAC,UAAU,CAAC,EAAE;MAC/BF,OAAO,GAAG,IAAIb,OAAO,CAACQ,KAAK,CAAC;IAC7B;IAEAN,cAAc,CAAC,CAAC,CAACD,eAAe,CAACY,OAAO,CAAC,CAAC;IAC1CG,OAAO,CAACC,GAAG,EAAAP,QAAA,GAACG,OAAO,cAAAH,QAAA,uBAAPA,QAAA,CAASF,KAAK,CAAC;IAE3B,OAAO,IAAI;EACZ;;EAEA;AACD;AACA;AACA;AACA;EACSI,OAAOA,CAACH,QAAgB,EAAU;IACzC;IACA,OAAOA,QAAQ;EAChB;AACD;AAACS,MAAA,GAzCYf,gBAAgB;AAAhBA,gBAAgB,CACbG,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}