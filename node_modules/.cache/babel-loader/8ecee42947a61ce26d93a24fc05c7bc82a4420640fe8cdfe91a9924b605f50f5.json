{"ast":null,"code":"//derived from:\n//  https://react-redux.js.org/tutorials/typescript-quick-start\n\nimport { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  account: undefined\n};\nexport const accountSlice = createSlice({\n  name: 'account',\n  initialState,\n  reducers: {\n    setAccountStore: {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes.\n      // Also, no return statement is required from these functions.\n\n      reducer: (state, action) => {\n        state.account = action.payload.account;\n      },\n      //prepare allows for us to have multiple arguments in a dispatch; this formats action\n      prepare: account => {\n        return {\n          payload: {\n            account\n          }\n        };\n      }\n    }\n  }\n});\n\n// Action creators are generated for each case reducer function\nexport const {\n  setAccountStore\n} = accountSlice.actions;\n\n// Other code such as selectors can use the imported `RootState` type\nexport const selectAccount = state => state.account;\nexport default accountSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","account","undefined","accountSlice","name","reducers","setAccountStore","reducer","state","action","payload","prepare","actions","selectAccount"],"sources":["C:/Users/Ethan/Desktop/ASU-Rideshare-App/src/store/features/accountSlice.ts"],"sourcesContent":["//derived from:\r\n//  https://react-redux.js.org/tutorials/typescript-quick-start\r\n\r\n\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { Account } from '../../account/Account';\r\nimport { RootState } from '../store';\r\n\r\ninterface accountState {\r\n\taccount: Account | undefined,\r\n}\r\n\r\nconst initialState = {\r\n\taccount: undefined,\r\n} as accountState\r\n\r\n\r\nexport const accountSlice = createSlice({\r\n\tname: 'account',\r\n\tinitialState,\r\n\treducers: {\r\n\t\tsetAccountStore: {\r\n\t\t\t// Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n\t\t\t// doesn't actually mutate the state because it uses the Immer library,\r\n\t\t\t// which detects changes to a \"draft state\" and produces a brand new\r\n\t\t\t// immutable state based off those changes.\r\n\t\t\t// Also, no return statement is required from these functions.\r\n\r\n\t\t\treducer: (state, action: PayloadAction<accountState>) => {\r\n\t\t\t\tstate.account = action.payload.account;\r\n\t\t\t},\r\n\r\n\t\t\t//prepare allows for us to have multiple arguments in a dispatch; this formats action\r\n\t\t\tprepare: (account:Account|undefined) => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tpayload: {account }\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n})\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { setAccountStore } = accountSlice.actions\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\nexport const selectAccount = (state: RootState) => state.account\r\n\r\nexport default accountSlice.reducer"],"mappings":"AAAA;AACA;;AAGA,SAASA,WAAW,QAAuB,kBAAkB;AAQ7D,MAAMC,YAAY,GAAG;EACpBC,OAAO,EAAEC;AACV,CAAiB;AAGjB,OAAO,MAAMC,YAAY,GAAGJ,WAAW,CAAC;EACvCK,IAAI,EAAE,SAAS;EACfJ,YAAY;EACZK,QAAQ,EAAE;IACTC,eAAe,EAAE;MAChB;MACA;MACA;MACA;MACA;;MAEAC,OAAO,EAAEA,CAACC,KAAK,EAAEC,MAAmC,KAAK;QACxDD,KAAK,CAACP,OAAO,GAAGQ,MAAM,CAACC,OAAO,CAACT,OAAO;MACvC,CAAC;MAED;MACAU,OAAO,EAAGV,OAAyB,IAAK;QACvC,OAAO;UACNS,OAAO,EAAE;YAACT;UAAQ;QACnB,CAAC;MACF;IACD;EACD;AACD,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAAEK;AAAgB,CAAC,GAAGH,YAAY,CAACS,OAAO;;AAEvD;AACA,OAAO,MAAMC,aAAa,GAAIL,KAAgB,IAAKA,KAAK,CAACP,OAAO;AAEhE,eAAeE,YAAY,CAACI,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}