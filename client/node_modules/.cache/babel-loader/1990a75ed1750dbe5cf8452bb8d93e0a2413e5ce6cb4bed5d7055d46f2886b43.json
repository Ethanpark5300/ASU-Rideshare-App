{"ast":null,"code":"var _class;\nimport { Account } from \"../account/Account\";\nexport class DatabaseAccessor {\n  constructor() {}\n  static getInstance() {\n    if (!DatabaseAccessor.instance) DatabaseAccessor.instance = new DatabaseAccessor();\n    return DatabaseAccessor.instance;\n  }\n\n  /**\r\n   * \r\n   * @param email username\r\n   * @param password password\r\n   * @returns an Account if successful, undefined otherwise\r\n   */\n  login(email, password) {\n    let hashedPassword = this.encrypt(password);\n    let account = undefined;\n    //make sure legal login\n    let loginSuccess = false;\n\n    //TODO actually put in legit tests\n    if (email.endsWith(\"@asu.edu\")) {\n      loginSuccess = true;\n    }\n    if (loginSuccess) {\n      account = new Account(email);\n    }\n    //console.log(account?.email);\n\n    return account;\n  }\n  /**\r\n   * \r\n   * @param email\r\n   * @param password\r\n   * @param firstName\r\n   * @param lastName\r\n   * @returns\r\n   */\n  register(email, firstName, lastName, password) {\n    //TODO add data to database\n    return true;\n  }\n\n  /**\r\n   * use this before doing account operations\r\n   * @param account Account to be verified\r\n   * @returns true if it is a legit account\r\n   */\n  verifyAccount(account) {\n    //TODO using parts of Account verify it is one\n    return true;\n  }\n\n  /**\r\n   * \r\n   * @param password string to be encrypted\r\n   * @returns encrypted password\r\n   */\n  encrypt(password) {\n    //TODO implement hashing\n    return password;\n  }\n}\n_class = DatabaseAccessor;\nDatabaseAccessor.instance = void 0;","map":{"version":3,"names":["Account","DatabaseAccessor","constructor","getInstance","instance","login","email","password","hashedPassword","encrypt","account","undefined","loginSuccess","endsWith","register","firstName","lastName","verifyAccount","_class"],"sources":["C:/Users/aeric/Documents/School/Capstone/ASU-Rideshare-App/src/databases/DatabaseAccessor.ts"],"sourcesContent":["import { Account } from \"../account/Account\";\r\nimport { setAccountStore } from \"../store/features/accountSlice\";\r\nimport { useAppDispatch } from \"../store/hooks\";\r\n\r\n\r\nexport class DatabaseAccessor {\r\n\tprivate static instance: DatabaseAccessor;\r\n\r\n\tprivate constructor() { }\r\n\r\n\tpublic static getInstance(): DatabaseAccessor {\r\n\t\tif (!DatabaseAccessor.instance)\r\n\t\t\tDatabaseAccessor.instance = new DatabaseAccessor();\r\n\t\treturn DatabaseAccessor.instance;\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t * @param email username\r\n\t * @param password password\r\n\t * @returns an Account if successful, undefined otherwise\r\n\t */\r\n\tpublic login(email: string, password: string):Account | undefined {\r\n\t\tlet hashedPassword: string = this.encrypt(password);\r\n\t\tlet account: Account | undefined = undefined;\r\n\t\t//make sure legal login\r\n\t\tlet loginSuccess = false;\r\n\r\n\t\t//TODO actually put in legit tests\r\n\t\tif (email.endsWith(\"@asu.edu\")) {\r\n\t\t\tloginSuccess = true;\r\n\t\t}\r\n\t\t\r\n\t\tif (loginSuccess) {\r\n\t\t\taccount = new Account(email);\r\n\t\t}\r\n\t\t//console.log(account?.email);\r\n\r\n\t\treturn account;\r\n\t}\r\n\t/**\r\n\t * \r\n\t * @param email\r\n\t * @param password\r\n\t * @param firstName\r\n\t * @param lastName\r\n\t * @returns\r\n\t */\r\n\tpublic register(email: string, firstName: string, lastName: string, password: string): boolean {\r\n\r\n\t\t//TODO add data to database\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * use this before doing account operations\r\n\t * @param account Account to be verified\r\n\t * @returns true if it is a legit account\r\n\t */\r\n\tpublic verifyAccount(account: Account): boolean {\r\n\r\n\t\t//TODO using parts of Account verify it is one\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t * @param password string to be encrypted\r\n\t * @returns encrypted password\r\n\t */\r\n\tprivate encrypt(password: string): string {\r\n\t\t//TODO implement hashing\r\n\t\treturn password;\r\n\t}\r\n}"],"mappings":";AAAA,SAASA,OAAO,QAAQ,oBAAoB;AAK5C,OAAO,MAAMC,gBAAgB,CAAC;EAGrBC,WAAWA,CAAA,EAAG,CAAE;EAExB,OAAcC,WAAWA,CAAA,EAAqB;IAC7C,IAAI,CAACF,gBAAgB,CAACG,QAAQ,EAC7BH,gBAAgB,CAACG,QAAQ,GAAG,IAAIH,gBAAgB,CAAC,CAAC;IACnD,OAAOA,gBAAgB,CAACG,QAAQ;EACjC;;EAEA;AACD;AACA;AACA;AACA;AACA;EACQC,KAAKA,CAACC,KAAa,EAAEC,QAAgB,EAAsB;IACjE,IAAIC,cAAsB,GAAG,IAAI,CAACC,OAAO,CAACF,QAAQ,CAAC;IACnD,IAAIG,OAA4B,GAAGC,SAAS;IAC5C;IACA,IAAIC,YAAY,GAAG,KAAK;;IAExB;IACA,IAAIN,KAAK,CAACO,QAAQ,CAAC,UAAU,CAAC,EAAE;MAC/BD,YAAY,GAAG,IAAI;IACpB;IAEA,IAAIA,YAAY,EAAE;MACjBF,OAAO,GAAG,IAAIV,OAAO,CAACM,KAAK,CAAC;IAC7B;IACA;;IAEA,OAAOI,OAAO;EACf;EACA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACQI,QAAQA,CAACR,KAAa,EAAES,SAAiB,EAAEC,QAAgB,EAAET,QAAgB,EAAW;IAE9F;IACA,OAAO,IAAI;EACZ;;EAEA;AACD;AACA;AACA;AACA;EACQU,aAAaA,CAACP,OAAgB,EAAW;IAE/C;IACA,OAAO,IAAI;EACZ;;EAEA;AACD;AACA;AACA;AACA;EACSD,OAAOA,CAACF,QAAgB,EAAU;IACzC;IACA,OAAOA,QAAQ;EAChB;AACD;AAACW,MAAA,GArEYjB,gBAAgB;AAAhBA,gBAAgB,CACbG,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}