{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport accountSlice from './features/accountSlice';\nexport const store = configureStore({\n  reducer: {\n    account: accountSlice\n  },\n  /**\r\n   * turns off errors for stuffing non-serializable objects into the store;\r\n   * if problems occur with the store disable this entire block to see the error messages that are getting blocked\r\n   * @param getDefaultMiddleware\r\n   * @returns\r\n   */\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: {\n      // Ignore these action types\n      //ignoredActions: ['your/action/type'],\n      // Ignore these field paths in all actions\n      //ignoredActionPaths: ['meta.arg', 'payload.timestamp'],\n      // Ignore these paths in the state\n      //ignoredPaths: ['items.dates'],\n\n      //ignoredActionPaths:['payload','payload.hovered', 'payload.extra'],\n\n      //ignoredPaths: ['advancedBuild.statBuild', 'advancedBuild.champ', 'ttHover.hovered', 'ttHover.extra'],\n    }\n  })\n});\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\n\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}","map":{"version":3,"names":["configureStore","accountSlice","store","reducer","account","middleware","getDefaultMiddleware","serializableCheck"],"sources":["C:/Users/aeric/Documents/School/Capstone/ASU-Rideshare-App/src/store/store.ts"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit'\r\nimport accountSlice from './features/accountSlice'\r\n\r\nexport const store = configureStore({\r\n\treducer: {\r\n\r\n\t\taccount: accountSlice,\r\n\r\n\t},\r\n\t/**\r\n\t * turns off errors for stuffing non-serializable objects into the store;\r\n\t * if problems occur with the store disable this entire block to see the error messages that are getting blocked\r\n\t * @param getDefaultMiddleware\r\n\t * @returns\r\n\t */\r\n\tmiddleware: (getDefaultMiddleware) => getDefaultMiddleware({\r\n\t\tserializableCheck: {\r\n\t\t\t// Ignore these action types\r\n\t\t\t//ignoredActions: ['your/action/type'],\r\n\t\t\t// Ignore these field paths in all actions\r\n\t\t\t//ignoredActionPaths: ['meta.arg', 'payload.timestamp'],\r\n\t\t\t// Ignore these paths in the state\r\n\t\t\t//ignoredPaths: ['items.dates'],\r\n\r\n\t\t\t//ignoredActionPaths:['payload','payload.hovered', 'payload.extra'],\r\n\r\n\t\t\t//ignoredPaths: ['advancedBuild.statBuild', 'advancedBuild.champ', 'ttHover.hovered', 'ttHover.extra'],\r\n\t\t},\r\n\t}),\r\n})\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,OAAOC,YAAY,MAAM,yBAAyB;AAElD,OAAO,MAAMC,KAAK,GAAGF,cAAc,CAAC;EACnCG,OAAO,EAAE;IAERC,OAAO,EAAEH;EAEV,CAAC;EACD;AACD;AACA;AACA;AACA;AACA;EACCI,UAAU,EAAGC,oBAAoB,IAAKA,oBAAoB,CAAC;IAC1DC,iBAAiB,EAAE;MAClB;MACA;MACA;MACA;MACA;MACA;;MAEA;;MAEA;IAAA;EAEF,CAAC;AACF,CAAC,CAAC;;AAEF;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}